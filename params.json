{"name":"Trachet","tagline":"Terminal I/O step-by-step debugger","body":"What is This?\r\n-------------\r\n\r\n**trachet = tracer + ratchet(step-by-step debugging service)**\r\n\r\nThis program runs as a terminal filter process between terminals and applications.\r\nIt provides step-by-step debugging and formatted sequence tracing service.\r\nYou can watch terminal I/O sequence on realtime, and it enables you to do step-by-step execution.\r\n\r\nMost of terminal applications such as vi have single threaded UI and typically has blocking terminal I/O.\r\nSo trachet might be useful for both of terminal emulator developers and terminal application developers.\r\n\r\n![trachet](http://zuse.jp/misc/trachet1.png)\r\n\r\nInstall\r\n-------\r\n\r\nvia pip\r\n\r\n```\r\n    $ pip install trachet\r\n```\r\n\r\nvia github\r\n\r\n```\r\n    $ git clone --recursive https://github.com/saitoha/trachet.git\r\n    $ cd trachet\r\n    $ python setup.py install\r\n```\r\n\r\nUsage\r\n-----\r\n\r\n```\r\n    $ trachet [options] command\r\n```\r\n\r\n### Options\r\n\r\n```\r\n    -h, --help                  show this help message and exit\r\n    -o OUTPUT, --output=OUTPUT  Specify output device or file\r\n    -b, --break                 \"break\" the program at the startup time\r\n    --version                   show version\r\n```\r\n\r\n### Sequense Tracing\r\nIf you specified TTY device by -o option,\r\nyou can look I/O sequence tracing on realtime (See Quick Start).\r\n\r\n\r\n### Step by Step debugging\r\n\r\n```\r\n- <F6> \r\n   Toggle trace state ON/OFF.\r\n\r\n- <F7>\r\n   Toggle break state ON/OFF.\r\n\r\n- <F8>\r\n   Step to next char or control sequence.\r\n\r\n- <F9>\r\n   Step to next ESC or CSI sequence.\r\n```\r\n\r\nThis settings can be changed with editing $HOME/.trachet/conf.py\r\n\r\n\r\nQuick Start\r\n-----------\r\n\r\n**STEP1**\r\nFirst, You need to prepare two terminal windows, *debugged terminal* and *output terminal*.\r\n\r\n**STEP2**\r\nAt the *output terminal*, type \"tty\" command.\r\n\r\n```\r\n$ tty \r\n/dev/pts/4\r\n```\r\nNow you get *output terminal*'s TTY device name(=/dev/pts/4).\r\n\r\n**STEP3**\r\nAt the *debugged terminal*, launch trachet.\r\n\r\nRun default shell and send formatted I/O sequences to *output terminal*.\r\n\r\n    $ trachet -o/dev/pts/4\r\n\r\nRun default shell and write non-colored formatted I/O sequences to a *text file*.\r\n\r\n    $ trachet -o log.txt\r\n\r\nRun vim and send formatted I/O sequences to *output terminal*.\r\n\r\n    $ trachet -o/dev/pts/4 vim \r\n\r\nRun emacs and send formatted I/O sequences to *output terminal*, and \"break\" emacs on startup time\r\n\r\n    $ trachet -b -o/dev/pts/4 emacs -nw\r\n\r\nReplay output log created by *script(1)* step by step.\r\n\r\n    $ trachet -b -o/dev/pts/4 cat ~/typescript -\r\n\r\nDependency\r\n----------\r\n\r\n - TFF - Terminal Filter Framework\r\n   https://github.com/saitoha/tff\r\n\r\nReference\r\n---------\r\n\r\n - VT100.net http://vt100.net/\r\n - XTerm Control Sequences http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\r\n - all-escapes.txt http://bjh21.me.uk/all-escapes/all-escapes.txt\r\n - Tera Term/Supported Control Functions http://ttssh2.sourceforge.jp/manual/en/about/ctrlseq.html\r\n - RLogin/Supported Control Codes http://nanno.dip.jp/softlib/man/rlogin/ctrlcode.html\r\n - mlterm/PROTOCOL http://mlterm.hg.sourceforge.net/hgweb/mlterm/mlterm/file/9baaded7e116/doc/en/PROTOCOL\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}